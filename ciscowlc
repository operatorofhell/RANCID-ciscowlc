#! /usr/bin/perl
##
## Copyright (C) 1997-2004 by Terrapin Communications, Inc.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed
## without fee for non-commerical purposes provided that this license
## remains intact and unmodified with any RANCID distribution.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is".  The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
## Except where noted otherwise, rancid was written by and is maintained by
## Henry Kilmer, John Heasley, Andrew Partan, Pete Whiting, and Austin Schutz.
##
#
#
# Modified from ciscoips by Josh Yost 
# Created on 4/16/2008 
#
#  This is meant to try handle Cisco's WLCs V4.X and on
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
# usage: ciscowlc [-d] [-l] [-f filename] [-r rawfile | $host]
use Getopt::Std;
getopts('df:lr:');
$log = $opt_l;
$debug = $opt_d;
$file = $opt_f;
$rawfile = $opt_r;
$host = $ARGV[0];
$clean_run = 0;
$found_end = 0;
$timeo = 90;				# wlogin timeout in seconds

my(@commandtable, %commands, @commands);# command lists
my(%filter_pwds);			# password filtering mode

# This routine is used to print out the router configuration
sub ProcessHistory {

    my($new_hist_tag,$new_command,$command_string, @string) = (@_);
    if ((($new_hist_tag ne $hist_tag) || ($new_command ne $command))
	&& scalar(%history)) {
	print eval "$command \%history";
	undef %history;
    }
    if (($new_hist_tag) && ($new_command) && ($command_string)) {
	if ($history{$command_string}) {
	    $history{$command_string} = "$history{$command_string}@string";
	} else {
	    $history{$command_string} = "@string";
	}
    } elsif (($new_hist_tag) && ($new_command)) {
	$history{++$#history} = "@string";
    } else {
	print "@string";
    }
    $hist_tag = $new_hist_tag;
    $command = $new_command;
    1;
}

sub numerically { $a <=> $b; }

# This is a sort routine that will sort numerically on the
# keys of a hash as if it were a normal array.
sub keynsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort numerically keys(%lines)) {
	$sorted_lines[$i] = $lines{$key};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# keys of a hash as if it were a normal array.
sub keysort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort keys(%lines)) {
	$sorted_lines[$i] = $lines{$key};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# values of a hash as if it were a normal array.
sub valsort{
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort values %lines) {
	$sorted_lines[$i] = $key;
	$i++;
    }
    @sorted_lines;
}

# This is a numerical sort routine (ascending).
sub numsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $num (sort {$a <=> $b} keys %lines) {
	$sorted_lines[$i] = $lines{$num};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# ip address when the ip address is anywhere in
# the strings.
sub ipsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $addr (sort sortbyipaddr keys %lines) {
	$sorted_lines[$i] = $lines{$addr};
	$i++;
    }
    @sorted_lines;
}

# These two routines will sort based upon IP addresses
sub ipaddrval {
    my(@a) = ($_[0] =~ m#^(\d+)\.(\d+)\.(\d+)\.(\d+)$#);
    $a[3] + 256 * ($a[2] + 256 * ($a[1] +256 * $a[0]));
}
sub sortbyipaddr {
    &ipaddrval($a) <=> &ipaddrval($b);
}

# This routine parses "show running-config"
sub ShowConfig {
print STDERR "    In ShowConfig: $_" if ($debug);
    ProcessHistory("","","","\n!--WLC Begin Config Data--!\n\n");

    $firstexit=0;


    while (<INPUT>) {
        tr/\015//d;
        tr/\020//d;

        $skipprocess=0;

        #remove snmp community string data

        if (/^(\s*snmp community create)/ && $filter_pwds >= 1) {
            ProcessHistory("","","","!$1 <removed>\n"); next;
        }
        if (/^(\s*snmp community accessmode (ro|rw))/ && $filter_pwds >= 1) {
            ProcessHistory("","","","!$1 <removed>\n"); next;
        }
        if (/^(\s*snmp community ipaddr\s\S+\s\S+) / && $filter_pwds >= 1) {
            ProcessHistory("","","","!$1 <removed>\n"); next;
        }

        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        if ( ! /^$prompt/) { 
                if ( ! $skipprocess ) { 
                        print STDOUT "      ShowConfig Data: $_" if ($debug);
                        ProcessHistory("","","","$_");
                }
        }
    }
    $clean_run=1;
    ProcessHistory("","","","\n!--WLC End Config Data--!\n");
    print STDERR "    Exiting ShowConfig: $_" if ($debug);
    return(0);
}

# This routine parses "show sysinfo" 
sub ShowSysinfo {
    print STDERR "    In ShowSysinfo: $_" if ($debug);
    ProcessHistory("","","","\n!WLC Show Sysinfo Start\n!\n"); 

    while (<INPUT>) {
	tr/\015//d;

	$skipprocess=0;

	if ( /^System Up Time/ ) { $skipprocess=1; }
	if ( /^Number of Active Clients/ ) { $skipprocess=1; }
	if ( /^Internal Temperature/ ) { $skipprocess=1; }
	if ( /^External Temperature/ ) { $skipprocess=1; }
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	if ( ! /^$prompt/) { 
		if ( ! $skipprocess ) { 
			print STDOUT "      ShowSysinfo Data: $_" if ($debug);
			ProcessHistory("","","","! $_"); 
		}
	}
    }
    ProcessHistory("","","","!\n!WLC Show Sysinfo End\n"); 
    print STDERR "    Exiting ShowSysinfo: $_" if ($debug);
    return(0);
}

# This routine parses "show udi"
sub ShowUdi {
 print STDERR "    In ShowUdi: $_" if ($debug);
    ProcessHistory("","","","\n!WLC Show Udi Start\n!\n");

    while (<INPUT>) {
        tr/\015//d;

        $skipprocess=0;

        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        if ( ! /^$prompt/) {
                if ( ! $skipprocess ) {
                        print STDOUT "      ShowUdi Data: $_" if ($debug);
                        ProcessHistory("","","","! $_");
                }
        }
    }
    ProcessHistory("","","","!\n!WLC Show Udi End\n");
    print STDERR "    Exiting ShowSysinfo: $_" if ($debug);
    return(0);

}


# dummy function
sub DoNothing {print STDOUT;}

# Main
@commandtable = (
	{'show udi'		=> 'ShowUdi'},
	{'show sysinfo'		=> 'ShowSysinfo'},
	{'show run-config commands'	=> 'ShowConfig'}
);
# Use an array to preserve the order of the commands and a hash for mapping
# commands to the subroutine and track commands that have been completed.
@commands = map(keys(%$_), @commandtable);
%commands = map(%$_, @commandtable);

$cisco_cmds = join(";", @commands);
$cmds_regexp = join("|", map quotemeta($_), @commands);

$file = "$host.new" unless $file;

open(OUTPUT,">$file") || die "Can't open $file for writing: $!\n";
select(OUTPUT);
# make OUTPUT unbuffered if debugging
if ($debug) { $| = 1; }

if ($rawfile) {
    print STDERR "opening file $rawfile\n" if ($debug);
    print STDOUT "opening file $rawfile\n" if ($log);
    open(INPUT,"<$rawfile") || die "open failed for $rawfile: $!\n";
} else {
    print STDERR "executing wlogin -t $timeo -c\"$cisco_cmds\" $host\n" if ($debug);
    print STDOUT "executing wlogin -t $timeo -c\"$cisco_cmds\" $host\n" if ($log);
    if (defined($ENV{NOPIPE})) {
	$rawfile = "$host.raw";
	system "wlogin -t $timeo -c \"$cisco_cmds\" $host </dev/null > $rawfile 2>&1" || die "wlogin failed for $host: $!\n";
	open(INPUT, "< $rawfile") || die "wlogin failed for $host: $!\n";
    } else {
	open(INPUT,"wlogin -t $timeo -c \"$cisco_cmds\" $host </dev/null |") || die "wlogin failed for $host: $!\n";
    }
}


# determine password filtering mode
if ($ENV{"FILTER_PWDS"} =~ /no/i) {
	$filter_pwds = 0;
} elsif ($ENV{"FILTER_PWDS"} =~ /all/i) {
	$filter_pwds = 2;
} else {
	$filter_pwds = 1;
}


ProcessHistory("","","","!RANCID-CONTENT-TYPE: ciscowlc\n!\n");
TOP: while(<INPUT>) {
    tr/\015//d;
    if (/[>#]\s?exit$/) {
	$clean_run = 1;
	last;
    }
    if (/^Error:/) {
	print STDOUT ("$host wlogin error: $_");
	print STDERR ("$host wlogin error: $_") if ($debug);
	$clean_run = 0;
	last;
    }
    while (/>\s*($cmds_regexp)\s*$/) {
	$cmd = $1;
	if (!defined($prompt)) {
            $prompt = ($_ =~ /^([^#]+>)/)[0];
            $prompt =~ s/([][}{)(\\])/\\$1/g;
            print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	}
	print STDERR ("WLC COMMAND:$_") if ($debug);
	if (! defined($commands{$cmd})) {
	    print STDERR "$host: found unexpected command - \"$cmd\"\n";
	    $clean_run = 0;
	    last TOP;
	}
	$rval = &{$commands{$cmd}};
	delete($commands{$cmd});
	if ($rval == -1) {
	    $clean_run = 0;
	    last TOP;
	}
    }
}
print STDOUT "Done $logincmd: $_\n" if ($log);
# Flush History
ProcessHistory("","","","");
# Cleanup
close(INPUT);
close(OUTPUT);

if (defined($ENV{NOPIPE})) {
    unlink($rawfile) if (! $debug);
}

# check for completeness
if (scalar(%commands) || !$clean_run ) {
    if (scalar(%commands)) {
	printf(STDOUT "$host: missed cmd(s): %s\n", join(',', keys(%commands)));
	printf(STDERR "$host: missed cmd(s): %s\n", join(',', keys(%commands))) if ($debug);
    }
    if (!$clean_run ) {
	print STDOUT "$host: End of run not found\n";
	print STDERR "$host: End of run not found\n" if ($debug);
	system("/usr/bin/tail -1 $file");
    }
    unlink "$host.new" if (! $debug);
}
